name: Release

on:
  release:
    types: [created]
defaults:
  run:
    working-directory: med_cli

jobs:
  deploy:
    name: deploy
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    strategy: 
      matrix:
        target: [x86_64-pc-windows-gnu, x86_64-unknown-linux-musl, x86_64-apple-darwin]
    steps:
      - name: Checkout
        uses: actions/checkout@v1
      - name: Install rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true
          target: ${{ matrix.target }}

      - name: Build target
        uses: actions-rs/cargo@v1
        with:
          use-cross: true
          command: build
          args: --release --target ${{ matrix.target }}

      - name: Package
        shell: bash
        run: |
          #strip target/${{ matrix.target }}/release/med
          cd target/${{ matrix.target }}/release          
          tar czvf ../../../med-${{ matrix.target }}.tar.gz med
          cd -
      - name: Publish
        uses: softprops/action-gh-release@v1
        # TODO: if any of the build step fails, the release should be deleted.
        with:
            files: 'med*'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # release:
  #   name: release ${{ matrix.target }}
  #   runs-on: ubuntu-latest
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       include:
  #         - target: x86_64-pc-windows-gnu
  #           archive: tar.gz
  #         - target: x86_64-unknown-linux-musl
  #           archive: tar.gz tar.xz
  #         - target: x86_64-apple-darwin
  #           archive: tar.gz
  #   steps:
  #     - uses: actions/checkout@master
  #     - name: Compile and release
  #       uses: rust-build/rust-build.action@v1.3.2
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       with:
  #         RUSTTARGET: ${{ matrix.target }}
  #         ARCHIVE_TYPES: ${{ matrix.archive }}
  #         TOOLCHAIN_VERSION: 1.64.0
  # windows-msvc-release:
  #   name: release windows msvc
  #   runs-on: windows-latest
  #   steps:
  #     - uses: actions/checkout@master
  #     - name: Build
  #       run: |
  #         cargo build --release
  #     - name: tar
  #       run: tar --directory=target/release -cf archive.tar.gz med.exe
  #     - name: upload
  #       run: |
  #         $id = gh api -H "Accept: application/vnd.github+json" /repos/jayhuang75/rust-cli-med/releases/tags/${{ github.ref_name }} --jq .id
  #         curl --fail-with-body -sS  -X POST --data-binary "@archive.tar.gz" -H 'Content-Type: application/octet-stream' -H 'Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' "https://uploads.github.com/repos/jayhuang75/rust-cli-med/releases/$id/assets?name=med_${{ github.ref_name }}_x86_64-pc-windows-msvc.tar.gz"
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  # macos-arm-release:
  #   name: release mac os arm release
  #   runs-on: macos-12
  #   steps:
  #     - uses: actions/checkout@master
  #     - name: check toolchain
  #       run: rustup default
  #     - name: Build
  #       run: |
  #         rustup toolchain install stable-aarch64-apple-darwin
  #         rustup target add aarch64-apple-darwin
  #         cargo build --release --target aarch64-apple-darwin
  #     - name: tar
  #       run: tar --directory=target/aarch64-apple-darwin/release -cf archive.tar.gz med
  #     - name: upload
  #       run: |
  #         id=$(gh api -H "Accept: application/vnd.github+json" /repos/jayhuang75/rust-cli-med/releases/tags/${{ github.ref_name }} --jq .id)
  #         curl --fail-with-body -sS  -X POST --data-binary @"archive.tar.gz" -H 'Content-Type: application/octet-stream' -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" "https://uploads.github.com/repos/jayhuang75/rust-cli-med/releases/$id/assets?name=med_${{ github.ref_name }}_aarch64-apple-darwin.tar.gz"
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}