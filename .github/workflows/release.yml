name: Release

# on:
#   release:
#     types: [created]

on:
  pull_request:
    branches: [main]

jobs:
  crate_metadata:
    name: Extract crate metadata
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3 
    - name: Extract crate information
      id: crate_metadata
      run: |
        cargo metadata --no-deps --format-version 1 | jq -r '"name=" + .packages[0].name' | tee -a $GITHUB_OUTPUT
        cargo metadata --no-deps --format-version 1 | jq -r '"version=" + .packages[0].version' | tee -a $GITHUB_OUTPUT
        cargo metadata --no-deps --format-version 1 | jq -r '"maintainer=" + .packages[0].authors[0]' | tee -a $GITHUB_OUTPUT
        cargo metadata --no-deps --format-version 1 | jq -r '"homepage=" + .packages[0].homepage' | tee -a $GITHUB_OUTPUT
    outputs:
        name: ${{ steps.crate_metadata.outputs.name }}
        version: ${{ steps.crate_metadata.outputs.version }}
        maintainer: ${{ steps.crate_metadata.outputs.maintainer }}
        homepage: ${{ steps.crate_metadata.outputs.homepage }}  
      
  create-release:
    name: create-release
    runs-on: ubuntu-latest
    needs: crate_metadata
    steps:
      - name: Get the release version from the tag
        shell: bash
        if: env.MED_VERSION == ''
        run: |
          echo "MED_VERSION=${{needs.crate_metadata.outputs.version}}" >> $GITHUB_ENV
          echo "version is: ${{ env.MED_VERSION }}"
      - name: Build Changelog
        id: github_release
        uses: mikepenz/release-changelog-builder-action@v3
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}   
      - name: Create GitHub release
        id: release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.MED_VERSION }}
          release_name: ${{ env.MED_VERSION }}
          body: ${{steps.github_release.outputs.changelog}}
  build-release:
    name: ${{ matrix.target }}
    runs-on: ubuntu-latest
    needs: crate_metadata
    strategy:
      fail-fast: true
      matrix:
        target: [x86_64-unknown-linux-gnu,x86_64-unknown-linux-musl]
    steps:
      - name: Checkout
        uses: actions/checkout@v1
      - name: Install rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true
          target: ${{ matrix.target }}

      - name: Build target
        uses: actions-rs/cargo@v1
        with:
          use-cross: true
          command: build
          args: --release --target ${{ matrix.target }}

      - name: Package
        shell: bash
        run: |
          cp -R demo target/${{ matrix.target }}/release 
          cd target/${{ matrix.target }}/release          
          tar czvf ../../../med-${{ matrix.target }}-${{ needs.crate_metadata.outputs.version }}.tar.gz med demo/
          cd -
      - name: Publish
        uses: softprops/action-gh-release@v1
        with:
            tag_name: ${{ needs.crate_metadata.outputs.version }}
            files: 'med*'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  windows-msvc-release:
    name: release windows msvc
    runs-on: windows-latest
    needs: crate_metadata
    steps:
      - name: Check Out Code
        uses: actions/checkout@master
      - name: Build
        run: |
          cargo build --release
      - name: tar
        run: |
          cp -R demo target/release/
          cd D:\a\rust-cli-med\rust-cli-med\target\release
          tar -cf win_msvc_archive-${{ needs.crate_metadata.outputs.version }}.tar.gz med.exe demo
      - name: Upload binaries to release  
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.crate_metadata.outputs.version }}
          files: 'win_msvc_archive-${{ needs.crate_metadata.outputs.version }}.tar.gz'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  
  macos-X86-release:
    name: release macos x86 release
    runs-on: macos-latest
    needs: crate_metadata
    steps:
      - uses: actions/checkout@master
      - name: check toolchain
        run: rustup default
      - name: Build
        run: |
          cargo build --release
      - name: tar
        run: |
          cp -R demo target/release/
          tar --directory=target/release -cf macos_x86_archive-${{ needs.crate_metadata.outputs.version }}.tar.gz med demo/
      - name: Upload binaries x86 to release  
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.crate_metadata.outputs.version }}
          files: 'macos_x86_archive-${{ needs.crate_metadata.outputs.version }}.tar.gz'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  macos-arm-release:
    name: release macos arm release
    runs-on: macos-latest
    needs: crate_metadata
    steps:
      - uses: actions/checkout@master
      - name: check toolchain
        run: rustup default
      - name: Build
        run: |
          rustup toolchain install stable-aarch64-apple-darwin
          rustup target add aarch64-apple-darwin
          cargo build --release --target aarch64-apple-darwin
      - name: tar
        run: |
          cp -R demo target/aarch64-apple-darwin/release
          tar --directory=target/aarch64-apple-darwin/release -cf macos_arm_archive-${{ needs.crate_metadata.outputs.version }}.tar.gz med demo/
      - name: Upload binaries arm to release  
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.crate_metadata.outputs.version }}
          files: 'macos_arm_archive-${{ needs.crate_metadata.outputs.version }}.tar.gz'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  crate_io_publish:
    name: Crate.io Publish
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2
      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - name: publish med_core & med_cli
        run: |
          cargo publish -p med_core --token ${CRATE_TOKEN}
          cargo publish -p med_cli --token ${CRATE_TOKEN}
        env:
          CRATE_TOKEN: ${{ secrets.CRATE_TOKEN }}
        