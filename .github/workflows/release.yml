name: Release

# on:
#   release:
#     types: [created]

on:
  push:
    branches:
      - "development"
  pull_request:
    branches: [development]

jobs:
  create-release:
    name: create-release
    runs-on: ubuntu-latest
    # env:
      # Set to force version number, e.g., when no tag exists.
      # RG_VERSION: TEST-0.0.0
    outputs:
      # upload_url: ${{ steps.release.outputs.upload_url }}
      med_version: ${{ env.MED_VERSION }}
    steps:
      - name: Get the release version from the tag
        shell: bash
        if: env.MED_VERSION == ''
        run: |
          # Apparently, this is the right way to get a tag name. Really?
          #
          # See: https://github.community/t5/GitHub-Actions/How-to-get-just-the-tag-name/m-p/32167/highlight/true#M1027
          echo "MED_VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          echo "version is: ${{ env.MED_VERSION }}"
      - name: Create GitHub release
        id: release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.MED_VERSION }}
          release_name: ${{ env.MED_VERSION }}
  # release:
  #   name: ${{ matrix.target }}
  #   runs-on: ubuntu-latest
  #   strategy:
  #     fail-fast: true
  #     matrix:
  #       target: [x86_64-unknown-linux-gnu,x86_64-unknown-linux-musl]
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v1
  #     - name: Install rust
  #       uses: actions-rs/toolchain@v1
  #       with:
  #         toolchain: stable
  #         profile: minimal
  #         override: true
  #         target: ${{ matrix.target }}

  #     - name: Build target
  #       uses: actions-rs/cargo@v1
  #       with:
  #         use-cross: true
  #         command: build
  #         args: --release --target ${{ matrix.target }}

  #     - name: Package
  #       shell: bash
  #       run: |
  #         cp -R demo target/${{ matrix.target }}/release 
  #         cd target/${{ matrix.target }}/release          
  #         tar czvf ../../../med-${{ matrix.target }}-${{ env.MED_VERSION }}.tar.gz med demo/
  #         cd -
  #     - name: Publish
  #       uses: softprops/action-gh-release@v1
  #       with:
  #           tag_name: ${{ github.ref_name }}
  #           files: 'med*'
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # windows-msvc-release:
  #   name: release windows msvc
  #   runs-on: windows-latest
  #   steps:
  #     - name: Check Out Code
  #       uses: actions/checkout@master
  #     - name: Build
  #       run: |
  #         cargo build --release
  #     - name: tar
  #       run: |
  #         cp -R demo target/release/
  #         cd D:\a\rust-cli-med\rust-cli-med\target\release
  #         tar -cf win_msvc_archive-${{ env.MED_VERSION }}.tar.gz med.exe demo
  #     - name: Upload binaries to release  
  #       uses: softprops/action-gh-release@v1
  #       with:
  #         tag_name: ${{ github.ref_name }}
  #         files: 'win_msvc_archive-${{ env.MED_VERSION }}.tar.gz'
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  
  # macos-X86-release:
  #   name: release macos x86 release
  #   runs-on: macos-latest
  #   steps:
  #     - uses: actions/checkout@master
  #     - name: check toolchain
  #       run: rustup default
  #     - name: Build
  #       run: |
  #         cargo build --release
  #     - name: tar
  #       run: |
  #         cp -R demo target/release/
  #         tar --directory=target/release -cf macos_x86_archive-${{ env.MED_VERSION }}.tar.gz med demo/
  #     - name: Upload binaries x86 to release  
  #       uses: softprops/action-gh-release@v1
  #       with:
  #         tag_name: ${{ github.ref_name }}
  #         files: 'macos_x86_archive-${{ env.MED_VERSION }}.tar.gz'
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # macos-arm-release:
  #   name: release macos arm release
  #   runs-on: macos-latest
  #   steps:
  #     - uses: actions/checkout@master
  #     - name: check toolchain
  #       run: rustup default
  #     - name: Build
  #       run: |
  #         rustup toolchain install stable-aarch64-apple-darwin
  #         rustup target add aarch64-apple-darwin
  #         cargo build --release --target aarch64-apple-darwin
  #     - name: tar
  #       run: |
  #         cp -R demo target/aarch64-apple-darwin/release
  #         tar --directory=target/aarch64-apple-darwin/release -cf macos_arm_archive-${{ env.MED_VERSION }}.tar.gz med demo/
  #     - name: Upload binaries arm to release  
  #       uses: softprops/action-gh-release@v1
  #       with:
  #         tag_name: ${{ github.ref_name }}
  #         files: 'macos_arm_archive-${{ env.MED_VERSION }}.tar.gz'
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # crate_io_publish:
  #   name: Crate.io Publish
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout sources
  #       uses: actions/checkout@v2
  #     - name: Install stable toolchain
  #       uses: actions-rs/toolchain@v1
  #       with:
  #         profile: minimal
  #         toolchain: stable
  #         override: true
  #     - name: publish med_core & med_cli
  #       run: |
  #         cargo publish -p med_core --token ${CRATE_TOKEN}
  #         cargo publish -p med_cli --token ${CRATE_TOKEN}
  #       env:
  #         CRATE_TOKEN: ${{ secrets.CRATE_TOKEN }}
        